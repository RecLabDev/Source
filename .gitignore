# C# and .NET
*.suo
*.user
*.userosscache
*.sln.docstates
*.dll
*.pdb
*.cache
*.bak
*.swp
*.obj
*.exe
*.pdb
*.user
*.aps
*.pch
*.vspscc
*_i.c
*_p.c
*_i.h
*.ilk
*.log
*.sbr
*.scc
*.swp
*.vs
*.ncb
*.suo
*.tlb
*.tlh
*.bak
*.cache
*.ilk
*.log
*.lib
*.sbr
*.sdf
*.opensdf
*.unsuccessfulbuild
*.dbmdl
*.dbproj.schemaview
*.pfx
*.publishsettings

# Unity
[Ll]ibrary/
[Tt]emp/
[Oo]bj/
[Bb]uild/
[Bb]uilds/
[Ll]ogs/
[Uu]serSettings/
[Mm]emoryCaptures/

# Deno
*.tsbuildinfo
deno_dir/

# React and Node.js
node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log
/.pnp
.pnp.js
/build/
/.idea/
/.vscode/
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

### Rust ###
# Generated by Cargo
# will have compiled files and executables
debug/
target/
.target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

### rust-analyzer ###
# Can be generated by other build systems other than cargo (ex: bazelbuild/rust_rules) 
rust-project.json
